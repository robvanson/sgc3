<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="xhtml-default.css" type="text/css" media="screen, aural, print" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
    "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" >
<head>
<link rel="shortcut icon" href="sgc.png" />
<link rel="icon" sizes="192x192" href="sgc.png" />
<link rel="manifest" href="manifest.json" />
<meta name="viewport" content="width=device-width" />
<meta name="mobile-web-app-capable" content="yes" />
<meta http-equiv="Content-Language" content="en" />
<title lang="en" xml:lang="en" dir="ltr">Settings - SpeakGoodChinese</title>
<style>
body {
	background-image: url("Background.png");
	background-color: rgb(250,250,250);
    background-repeat: no-repeat;
    background-position: center center;
    background-attachment: fixed;}
h1 {
	text-align: center;
	}
button {
		position: fixed;
		overflow: hidden;
		text-overflow: clip clip;
		width:17%;
		height:15%;
		cursor:pointer; /*forces the cursor to change to a hand when the button is hovered*/
		text-align:center;
		font: bold 3vmin "Helvetica";
		background-color: rgb(220,220,220);
		
		-webkit-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		-moz-box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		box-shadow: inset 0px 1px 0px #3e9cbf, 0px 5px 0px 0px #205c73, 0px 10px 5px #999;
		
		/*give the corners a small curve*/
		-moz-border-radius: 7px;
		-webkit-border-radius: 7px;
		border-radius: 7px;
		}

</style>

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />

<script type="text/javascript" src="internationalization_tables.js" ></script>   
<script type="text/javascript" src="wordlists.js" ></script>   
<script type="text/javascript" src="wordlists_plus.js" ></script>   
</head>
<body onfocus="load_SGC3_settings (); " onblur="store_SGC3_settings ();" onunload="store_SGC3_settings (); localStorage.removeItem('settingsWindow'); if(creditsWindow)creditsWindow.close(); " >
<!--
SpeakGoodChinese 3
Copyright (C) 2016 R.J.J.H. van Son (r.j.j.h.vanson@gmail.com)

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You can find a copy of the GNU General Public License at
http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
-->
	<div id='headertitle' style='position: center; font-size: 3vmin; '>
		<h2 style='text-align: center' id="settingsTitle">
		SpeakGoodChinese 3 <br />
		Shuō hǎo Zhōngwén <br />
		说好中文
		</h2>
	</div>
	<div style="position: fixed; color: black; bottom: 70%; left: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin; text-align: center " id="LanguageCaption">---</div>	
	<select id="Language" style="position: fixed; color: black; bottom: 65%; left: 5%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin ; background-color: rgb(220,220,220); " onchange="sgc3_settings.language = change_configLanguage(); store_SGC3_settings (); " >
		<option value="---" ><span id="LanguageCaption2" title="" >---</span></option>
	</select> 

	<div style="position: fixed; color: black; bottom: 70%; left: 25%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin; text-align: center " id="RegisterCaption">---</div>	
	<select id="Register" style="position: fixed; color: black; bottom: 65%; left: 25%; height: 8%; width: 17%; font: 'Helvetica'; font-size: 3vmin; background-color: rgb(220,220,220); " onchange="sgc3_settings.register = getRegister(); store_SGC3_settings (); " >
		<option value="---" ><span id="RegisterCaption2" title="" >---</span></option>
	</select> 

	<div title=""><button type="button" style="color: black; bottom: 65%; left: 45%; height: 8%;" id="LocalSynthesis" ><span id="Synthesis_eSpeak" >Synthesis</span></button></div>
	
	<div style="background-color: rgb(220,220,220); position: fixed; color: black; bottom: 54%; left: 25%; height: 8%; width: 17%; font-size: 3vmin; text-align: center; " id="LocalStrict" title="">
		<span id="Recognition" style="vertical-align: middle; " >---</span><br />
		<span id="StrictPost" style="vertical-align: middle; " >---</span>
		<select id="Strict"  style="font-size: 2vmin; vertical-align: middle; background-color: rgb(220,220,220);" onchange="sgc3_settings.strict = getStrict(); store_SGC3_settings (); ">
			<option value="0">0</option><option value="1">1</option><option value="2">2</option><option value="3">3</option>
		</select>
	</div>
	
	<div title=""><div style="background-color: rgb(220,220,220); position: fixed; color: black; bottom: 54%; left: 45%; height: 8%; width: 17%; font-size: 3vmin; text-align: center; " id="LocalRecordingTime" title="">
		<span id="RecordingTimeCaption" style="vertical-align: middle; " >---</span><br />
		<select id="RecordingTime"  style="font-size: 2vmin; vertical-align: middle; background-color: rgb(220,220,220);" onchange="sgc3_settings.recSecs = getRecordingTime(); store_SGC3_settings (); ">
			<option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="10">10</option>
		</select>
		<span id="RecordingTimePost" style="vertical-align: middle; " >---</span> 
	</div></div>
	
	<div title=""><button type="button" style="color: black; bottom: 65%; left: 65%; height: 8%" id="ShuffleListsButton" ><span id="ShuffleLists" >Synthesis</span></button></div>
	<div title=""><button type="button" style="color: black; bottom: 55%; left: 65%; height: 8%" id="DisplayNumbersButton" ><span id="DisplayNumbers" >---</span></button></div>
	<div title=""><button type="button" style="color: black; bottom: 45%; left: 65%; height: 8%" id="DisplayPinyinButton" ><span id="DisplayPinyin" >---</span></button></div>
	<div title=""><button type="button" style="color: black; bottom: 35%; left: 65%; height: 8%" id="DisplayCharButton" ><span id="DisplayChar" >---</span></button></div>
	<div title=""><button type="button" style="color: black; bottom: 25%; left: 65%; height: 8%" id="DisplayTransButton" ><span id="DisplayTrans" >---</span></button></div>
	
	<div title=""><button type="button" style="color: black; bottom: 62%; left: 85%; height: 14%; width: 10%" id="CreditsButton" onclick="creditsWindow = window.open('SpeakGoodChinese3_Credits.xml', '_blank');" ><span id="Credits" >---</span></button></div>

	<input type="file" id="HiddenOpenWordlist" name="OpenWordlist" style="display:none" onchange='openWordlist (this.files); this.value="";' title="OpenWord" />
	<div title=""><button type="button" style="color: black; bottom: 5%; left: 5%; height: 8%;" id="LocalOpenWordlist" ><span id="OpenWordlist" >---</span></button></div>
	<div style="position: fixed; color: gray; bottom: 13%; left: 20%; height: 5%; width: 27%; font: 'Helvetica'; font-size: 3vmin; text-align: center " id="CurrentWordlist">---</div>	
	<div title=""><button type="button" style="color: black; bottom: 5%; left: 25%; height: 8%;" id="DeleteWordlistButton" ><span id="DeleteWordlist" >---</span></button></div>

    <script type="text/javascript">
	//<![CDATA[
	// Install the service worker for offline use
	if ('serviceWorker' in navigator) {
	  navigator.serviceWorker.register('sw.js').then(function(registration) {
	    // Registration was successful
	    console.log('ServiceWorker registration successful with scope: ',    registration.scope);
	  }).catch(function(err) {
	    // registration failed :(
	    console.log('ServiceWorker registration failed: ', err);
	  });
	}
	
	// DOM parameters
	var mainWindow = localStorage.mainWindow;
	var creditsWindow;
	
	var localSynthesis = document.getElementById('LocalSynthesis');
	var localRecordingTime = document.getElementById('RecordingTime');
	var localStrict = document.getElementById('Strict');

	var shuffleListsButton = document.getElementById('ShuffleListsButton');
	var displayNumbersButton = document.getElementById('DisplayNumbersButton');
	var displayPinyinButton = document.getElementById('DisplayPinyinButton');
	var displayCharButton = document.getElementById('DisplayCharButton');
	var displayTransButton = document.getElementById('DisplayTransButton');
	var openWordlistButton = document.getElementById('LocalOpenWordlist');
	var hiddenOpenWordlist = document.getElementById('HiddenOpenWordlist');
	openWordlistButton.onclick = function () {
	    document.getElementById('HiddenOpenWordlist').click();
	};
	var deleteWordlistButton = document.getElementById('DeleteWordlistButton');
	var currentWordlistName = document.getElementById('CurrentWordlist');
	
	// Global settings
	var sgc3_settings = {
		settingsRead: false,
		recSecs: 3,
		ttsSpeed: 110,
		ttsVariant: "f3",
		shuffleLists: true,
		register: 249, // Must match Register_249 Id
		wordList: "20 basic tone combinations",
		language: "",
		synthesis_eSpeak: false,
		strict: 1,
		personalWordlists: [],
		displayNumbers: false,
		displayPinyin: true,
		displayChar: true,
		displayTrans: true
	};
	
	// Store settings
	function store_SGC3_settings () {
		sgc3_settings.settingsRead = true;

		for (x in sgc3_settings) {
			localStorage[x] = JSON.stringify(sgc3_settings[x]);
		};
	};
	
	function load_SGC3_settings () {
		for (x in sgc3_settings) {
			// For some reason, parsing the language goes wrong
			if (localStorage[x]) {
				sgc3_settings[x] = JSON.parse(localStorage[x]);
			};
		};
		
		set_configLanguage (sgc3_settings.language);
		setRegister (sgc3_settings.register);
		setRecordingTime (sgc3_settings.recSecs);
		setStrict (sgc3_settings.strict);

		localRecordingTime.value = sgc3_settings.recSecs;
		localStrict.value = sgc3_settings.strict;
		sgc3_settings.settingsRead = true;
		wordlists = combineWordlistLists(global_wordlists, sgc3_settings.personalWordlists);
		get_wordlist (sgc3_settings.wordList);
		currentWordlistName.textContent = sgc3_settings.wordList;
		currentWordlistName.style.color = "gray";
		deleteWordlistButton.style.color = "gray";
		deleteWordlistButton.disabled = true;
		if (wordlistExist (sgc3_settings.personalWordlists, sgc3_settings.wordList)) {
			currentWordlistName.style.color = "blue";
			deleteWordlistButton.style.color = "black";
			deleteWordlistButton.disabled = false;
		};
	};
	
	// Initialize to stored settings
	load_SGC3_settings ();
	
	// Set language (make that selectable)
	if (!sgc3_settings.language) {
		sgc3_settings.language = (userLanguage) ? userLanguage : "EN";
	};
	set_configLanguage (sgc3_settings.language);

	// Wordlists	
	if (sgc3_settings.shuffleLists) {
		shuffleListsButton.style.color = "red";
		shuffleListsButton.background = "rgb(256,245,245)";
	};
	
	shuffleListsButton.onclick = function () {
		if (! sgc3_settings.shuffleLists) {
			sgc3_settings.shuffleLists = true;
			shuffleListsButton.style.color = "red";
			shuffleListsButton.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.shuffleLists = false;
			shuffleListsButton.style.color = "black";
			shuffleListsButton.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};

	if (sgc3_settings.displayNumbers) {
		displayNumbersButton.style.color = "red";
		displayNumbersButton.background = "rgb(256,245,245)";
	};
	
	displayNumbersButton.onclick = function () {
		if (! sgc3_settings.displayNumbers) {
			sgc3_settings.displayNumbers = true;
			displayNumbersButton.style.color = "red";
			displayNumbersButton.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.displayNumbers = false;
			displayNumbersButton.style.color = "black";
			displayNumbersButton.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};

	if (sgc3_settings.displayPinyin) {
		displayPinyinButton.style.color = "red";
		displayPinyinButton.background = "rgb(256,245,245)";
	};
	
	displayPinyinButton.onclick = function () {
		if (! sgc3_settings.displayPinyin) {
			sgc3_settings.displayPinyin = true;
			displayPinyinButton.style.color = "red";
			displayPinyinButton.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.displayPinyin = false;
			displayPinyinButton.style.color = "black";
			displayPinyinButton.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};

	if (sgc3_settings.displayChar) {
		displayCharButton.style.color = "red";
		displayCharButton.background = "rgb(256,245,245)";
	};
	
	displayCharButton.onclick = function () {
		if (! sgc3_settings.displayChar) {
			sgc3_settings.displayChar = true;
			displayCharButton.style.color = "red";
			displayCharButton.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.displayChar = false;
			displayCharButton.style.color = "black";
			displayCharButton.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};

	if (sgc3_settings.displayTrans) {
		displayTransButton.style.color = "red";
		displayTransButton.background = "rgb(256,245,245)";
	};
	
	displayTransButton.onclick = function () {
		if (! sgc3_settings.displayTrans) {
			sgc3_settings.displayTrans = true;
			displayTransButton.style.color = "red";
			displayTransButton.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.displayTrans = false;
			displayTransButton.style.color = "black";
			displayTransButton.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};

	function openWordlist (files) {
		var wordlistFile;
		for (var i=0; i < files.length; ++i) {
			if (files[i].name.match(/\.(tsv|Table|csv)$/i)) {
				wordlistFile = files[i];
				readWordlist (wordlistFile);
			};
		};
	};
	
	deleteWordlistButton.onclick = function () {
		var wordlistName = sgc3_settings.wordList;
		var canBeDeleted = wordlistExist (sgc3_settings.personalWordlists, wordlistName);
		var confirmText = config_tables[sgc3_settings.language].DeleteWordlistConfirm[1];
		canBeDeleted = confirm(confirmText);
		if (canBeDeleted) {
			for(var x = sgc3_settings.personalWordlists.length - 1; x >= 0; --x) {
				if (sgc3_settings.personalWordlists[x][0] == wordlistName) {
					sgc3_settings.personalWordlists.splice(x, 1);
					canBeDeleted = true;
				};
			};
			// rebuild wordlist;
			wordlists = combineWordlistLists(global_wordlists, sgc3_settings.personalWordlists);
			wordlistNumber = (wordlistNumber < wordlists.length) ? wordlistNumber : 0;
			sgc3_settings.wordList = wordlists[wordlistNumber][0];
			localStorage.currentWord = JSON.stringify(0);
			store_SGC3_settings ();
			load_SGC3_settings ();
			// Remove last recording
		};
	};
	
	// Set TTS
	if (sgc3_settings.synthesis_eSpeak) {
		localSynthesis.style.color = "red";
		localSynthesis.background = "rgb(256,245,245)";
	};
	
	localSynthesis.onclick = function () {
		if (!sgc3_settings.synthesis_eSpeak) {
			sgc3_settings.synthesis_eSpeak = true;
			localSynthesis.style.color = "red";
			localSynthesis.background = "rgb(232,210,210)";
		} else {
			sgc3_settings.synthesis_eSpeak = false;
			localSynthesis.style.color = "black";
			localSynthesis.background = "rgb(220,220,220)";
		};
		store_SGC3_settings ();
	};
	
	
	function getTTSvoice(){
		var selectedVoice;
		if (window.speechSynthesis) {
			var voices = window.speechSynthesis.getVoices();
			if (! voices) voices = window.speechSynthesis.getVoices();
			for (x = 0; x < voices.length; ++x) {
				if (voices[x].lang == "zh-CN") { 
					voiceZH_CN = x;
					selectedVoice = voices[x];
				};
			};
		}
		return selectedVoice;
	}
	
	// Recording time
	function getRecordingTime () {
		var index = document.getElementById("RecordingTime").selectedIndex;
		var value = document.getElementById("RecordingTime").options[index].value;
		if (index < 0) value = 3;
		return value;
	}
	
	function setRecordingTime (value) {
		for(var x = 0; x < document.getElementById("RecordingTime").options.length; ++ x) {
			if (document.getElementById("RecordingTime").options[x].value == value) {
				document.getElementById("RecordingTime").selectedIndex = x;
			};
		};
	};
	
	function getStrict () {
		var index = document.getElementById("Strict").selectedIndex;
		var value = document.getElementById("Strict").options[index].value;
		if (index < 1) {
			value = 0;
			document.getElementById("Strict").selectedIndex = 1;
		};
		return value;
	}
	
	function setStrict (value) {
		if (value < 0 || value > 3) value = 0;
		for(var x = 0; x < document.getElementById("Strict").options.length; ++ x) {
			if (document.getElementById("Strict").options[x].value == value) {
				document.getElementById("Strict").selectedIndex = x;
			};
		};
	};
	
	// Set Register
	setRegister (sgc3_settings.register);
	
	//]]>	
	</script>

 
</body>
</html>
